# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# set name of action
name: cTI prod pipeline CI-CD

# when to run this action
on:
  pull_request:
    types: [opened, reopened]

# read only permission for files
permissions:
  contents: read

# define AWS configurations
env:
  AWS_REGION: us-east-1                            # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: github-action-test # set this to your Amazon ECR repository name

# define workflow for different jobs to run
jobs:

  # CI python code with basic test build
  test_build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest ./test/test_all_build.py -k "test_check_all_flags_shouldpass"
    
  # CI model output correctness
  test_model_output:

    needs: [test_build]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
    - name: Test with pytest
      run: |
        pytest ./test/test_all_model_output.py -k "test_check_all_flags_shouldpass"

  # CI docker with test build
  test_build_docker_model:

    needs: [test_model_output]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image
      working-directory: ./src/aws/tf_serving
      run: |
        docker build -t cti-pred . --file Dockerfile

  # CD docker deploy as a container to AWS ECR
  deploy_model_ECR:

    needs: [test_build_docker_model]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ./src/aws/tf_serving
      run: |
        docker build -t cti-pred . --file Dockerfile
        docker tag cti-pred:latest ${{ steps.login-ecr-public.outputs.registry }}/$ECR_REPOSITORY:$${{ github.event.release.tag_name }}
        docker push ${{ steps.login-ecr-public.outputs.registry }}/$ECR_REPOSITORY:$${{ github.event.release.tag_name }}
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"    

  # INCOMPLETE # CD deploy data outputted to AWS RDS
  deploy_data_RDS:

    needs: [test_model_output]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
