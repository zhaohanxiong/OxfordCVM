# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# set name of action
name: cTI prod pipeline CI-CD

# when to run this action
on:
  pull_request:
    branches: ["prod"]
    types: [opened, reopened]

# read only permission for files
permissions:
  contents: read

# define AWS configurations
env:
  AWS_REGION: us-east-1                       # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: cti-pred                    # set this to your Amazon ECR repository name
  ECS_SERVICE: cti_model                      # set this to your Amazon ECS service name
  ECS_CLUSTER: cti-cluster                    # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./src/aws/terraform/task_definition.json.tpl # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: ""                          # set this to the name of the container in the
                                              # containerDefinitions section of your task definition

# define workflow for different jobs to run
jobs:

  # # CI python code with basic test build
  # test_build:

  #   name: test_build

  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.10"

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install flake8 pytest

  #   - name: Lint with flake8
  #     run: |
  #       # stop the build if there are Python syntax errors or undefined names
  #       flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #       # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #       flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  #   - name: Test with pytest
  #     run: |
  #       pytest ./test/test_all_build.py -k "test_check_all_flags_shouldpass"
    
  # # CI model output correctness
  # test_model_output:

  #   name: test_model_output

  #   needs: [test_build]
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.10"

  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install pytest
  #   - name: Test with pytest
  #     run: |
  #       pytest ./test/test_all_model_output.py -k "test_check_all_flags_shouldpass"

  # # CI docker with test build
  # test_build_docker_model:

  #   name: test_build_docker_model

  #   needs: [test_model_output]
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Build the Docker image
  #     working-directory: ./src/aws/tf_serving
  #     run: |
  #       docker build -t cti-pred . --file Dockerfile

  # CD docker deploy as a container to AWS ECR and ECS
  deploy_model_ECR:

    name: deploy_model_ECR

    #needs: [test_build_docker_model]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: ./src/aws/tf_serving
      env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
      run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
    
  # # INCOMPLETE # CD deploy data outputted to AWS RDS
  # deploy_data_RDS:

  #   name: deploy_data_RDS

  #   needs: [test_model_output]
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@v3
  #     with:
  #       python-version: "3.10"
